@* @page "/auction/create-item-123"
@using AuctionPortal.Data.Models
@using AuctionPortal.Components.ImageCarousel
@inject ISnackbar Snackbar

<PageTitle>Create Auction Item</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large" Class="py-6">

    <MudText Typo="Typo.h4" Class="mb-6">Create / Edit Auction Item</MudText>

    <MudGrid Gutter="4">

        <!-- LEFT: Images / Upload -->
        <MudItem xs="12" md="5">
            <MudText Typo="Typo.h6" Class="mb-1">Images</MudText>

            <ImageCarousel Items="_imageUrls?.Select(img => new CarouselImage { Id = Guid.NewGuid(), Url = img })" />
  
            <MudStack Spacing="1">
                <MudButtonGroup Variant="Variant.Outlined" Color="Color.Primary">
                    <MudFileUpload T="IReadOnlyList<IBrowserFile>" Accept=".png, .jpg" FilesChanged="UploadFiles" MaximumFileCount="100">
                        <ActivatorContent>
                            <MudButton Variant="Variant.Filled"
                                       Color="Color.Primary"
                                       StartIcon="@Icons.Material.Filled.CloudUpload">
                                Upload Files
                            </MudButton>
                        </ActivatorContent>
                    </MudFileUpload>
                    <MudIconButton Color="Color.Dark" Icon="@Icons.Material.Filled.Refresh" />
                    <MudIconButton Color="Color.Error" Icon="@Icons.Material.Filled.Delete" />
                </MudButtonGroup>

            </MudStack>
        </MudItem>

        <!-- RIGHT: Form -->
        <MudItem xs="12" md="7">
            <MudStack Spacing="3">

                <MudTextField @bind-Value="Title" Label="Title" Variant="Variant.Outlined" FullWidth="true" />
                <MudTextField @bind-Value="Description" Label="Description" Variant="Variant.Outlined" Lines="4" FullWidth="true" />

                <MudText Typo="Typo.subtitle2">Tags</MudText>
                <MudChipSet @bind-SelectedValues="_selectedTags" SelectionMode="SelectionMode.MultiSelection" CheckMark="false" Variant="Variant.Filled" Color="Color.Info">
                    <MudChip Value="@("Event")" />
                    <MudChip Value="@("Tech")" />
                    <MudChip Value="@("Wellbeing")" />
                    <MudChip Value="@("Trip Away")" />
                    <MudChip Value="@("Premium")" />
                </MudChipSet>

                <MudTextField @bind-Value="StartingBid" Label="Starting Bid" Variant="Variant.Outlined"
                              Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.CurrencyPound"
                              AdornmentColor="Color.Info" FullWidth="true" />

                <MudDivider />

                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="SaveAuctionItem" FullWidth="true" Size="Size.Large">
                    Save Auction Item
                </MudButton>
            </MudStack>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    public string? Title { get; set; }
    public string? Description { get; set; }
    public double? StartingBid { get; set; }

    private IReadOnlyCollection<string>? _selectedTags;
    private readonly ICollection<IBrowserFile> _files = new List<IBrowserFile>();
    private readonly List<string> _imageUrls = new();

    private async Task UploadFiles(IReadOnlyList<IBrowserFile> files)
    {
        foreach (var file in files)
        {
            _files.Add(file);

            if (!file.ContentType.StartsWith("image/"))
                continue;

            try
            {
                using var stream = file.OpenReadStream(maxAllowedSize: 10_000_000);
                using var ms = new MemoryStream();
                await stream.CopyToAsync(ms);
                var base64 = Convert.ToBase64String(ms.ToArray());
                var imageUrl = $"data:{file.ContentType};base64,{base64}";
                _imageUrls.Add(imageUrl);
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Error uploading {file.Name}: {ex.Message}", Severity.Error);
            }
        }

        StateHasChanged();
    }

    private void SaveAuctionItem()
    {
        Snackbar.Add("Auction item saved!", Severity.Success);
    }
}
 *@