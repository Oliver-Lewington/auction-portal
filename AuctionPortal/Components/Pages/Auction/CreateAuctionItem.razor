@page "/auction/create-item"
@using AuctionPortal.Data.Models
@using AuctionPortal.Components.ImageCarousel
@inject ISnackbar Snackbar

<PageTitle>Create Auction Item</PageTitle>

<MudGrid>
    <!-- LEFT SIDE: Images / Upload -->
    <MudItem xs="12" md="5">
        <MudText Typo="Typo.h5">Images</MudText>
        @if (_imageUrls.Any())
        {
            <ImageCarousel Items="_imageUrls.Select(img => new CarouselImage { Id = Guid.NewGuid(), Url = img })" />
        }
        else
        {
            <MudText>There are no images uploaded please upload.</MudText>
        }

        <MudButtonGroup Color="Color.Primary" Variant="Variant.Outlined">
            <MudIconButton Icon="@Icons.Material.Filled.AccessAlarm"></MudIconButton>
            <MudToggleIconButton Icon="@Icons.Material.Filled.RestoreFromTrash" Color="@Color.Error"
                                 ToggledIcon="@Icons.Material.Filled.AlarmOn" ToggledColor="@Color.Success" />
            <MudFileUpload T="IReadOnlyList<IBrowserFile>" Accept=".png, .jpg" FilesChanged="UploadFiles" MaximumFileCount="100">
                <ActivatorContent>
                    <MudButton Variant="Variant.Filled"
                               Color="Color.Primary"
                               StartIcon="@Icons.Material.Filled.CloudUpload">
                        Upload Files
                    </MudButton>
                </ActivatorContent>
            </MudFileUpload>
        </MudButtonGroup>
    </MudItem>

    <!-- RIGHT SIDE: Form -->
    <MudItem xs="12" md="7">
        <MudText Typo="Typo.h5">Details</MudText>
        <MudTextField @bind-Value="Title" Label="Title" Variant="Variant.Outlined"></MudTextField>
        <MudTextField T="string" Label="Description" Variant="Variant.Outlined" Text="@Description" Lines="3" />
        <MudPaper Class="pa-3">
            <MudText Typo="Typo.subtitle2">Tags</MudText>
            <MudChipSet @bind-SelectedValues="_selectedTags" SelectionMode="SelectionMode.MultiSelection" CheckMark="false" Variant="Variant.Text" Color="Color.Info">
                <MudChip Value="@("Event")" />
                <MudChip Value="@("Tech")" />
                <MudChip Value="@("Wellbeing")" />
                <MudChip Value="@("Trip Away")" />
                <MudChip Value="@("Premium")" />
            </MudChipSet>
        </MudPaper>
        
        <MudTextField @bind-Value="StartingBid" Label="Starting Bid" Variant="Variant.Outlined" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.CurrencyPound" AdornmentColor="Color.Info" />
    </MudItem>
</MudGrid>

@code {
    public string? Title { get; set; }
    public string? Description { get; set; }
    public double? StartingBid { get; set; }

    private IReadOnlyCollection<string>? _selectedTags;
    private readonly ICollection<IBrowserFile> _files = new List<IBrowserFile>();
    private readonly List<string> _imageUrls = new();

    private async Task UploadFiles(IReadOnlyList<IBrowserFile> files)
    {
        foreach (var file in files)
        {
            _files.Add(file);

            if (!file.ContentType.StartsWith("image/"))
                return;

            try
            {

                using var stream = file.OpenReadStream(maxAllowedSize: 10_000_000); // 10MB limit
                using var ms = new MemoryStream();
                await stream.CopyToAsync(ms);
                var base64 = Convert.ToBase64String(ms.ToArray());
                var imageUrl = $"data:{file.ContentType};base64,{base64}";
                _imageUrls.Add(imageUrl);

            }
            catch (Exception ex)
            {

            }
        }

        StateHasChanged();
    }
}
