@page "/create"
@using AuctionPortal.Data.Models
@using AuctionPortal.Services
@using MudBlazor
@using System.Diagnostics

@inject ISnackbar Snackbar
@inject IAuctionService AuctionService
@inject NavigationManager NavigationManager

<MudContainer MaxWidth="MaxWidth.Medium" Class="py-3">
    <MudText Typo="Typo.h4" GutterBottom="true">Create a New Auction</MudText>
    <MudText Typo="Typo.subtitle2" Class="mb-4">
        Follow the steps below to create your auction. Set a title, description, schedule, and optional settings.
    </MudText>
    <MudDivider Class="my-4" />

        <MudStepper NonLinear OnPreviewInteraction="OnPreviewInteraction" @bind-ActiveIndex="_activeIndex">
            <!-- Step 1 -->
            <MudStep Title="Step 1: Auction Details" SecondaryText="Enter a name and description" HasError="@_hasErrorStep1">
                <MudStack Spacing="3">
                    <MudTextField @bind-Value="_auction.Name"
                                  Label="Name"
                                  Variant="Variant.Outlined"
                                  FullWidth="true"
                                  Error="@_hasErrorStep1"
                                  HelperText="@(_hasErrorStep1 ? "Name is required." : "Enter a descriptive name for your auction.")" />

                    <MudTextField @bind-Value="_auction.Description"
                                  Label="Description"
                                  Lines="4"
                                  Variant="Variant.Outlined"
                                  FullWidth="true"
                                  HelperText="Optional: Add more detail about the auction." />
                </MudStack>
            </MudStep>

            <!-- Step 2 -->
            <MudStep Title="Step 2: Schedule" SecondaryText="Choose start and end times" HasError="@(_hasErrorStep2)">
                <MudStack Spacing="3">
                    <MudDatePicker Label="Start Time"
                                   Date="@StartTimeNullable"
                                   DateChanged="@(d => StartTimeNullable = d)"
                                   Variant="Variant.Outlined"
                                   Error="@(_hasErrorStep2 && StartTimeNullable == null || StartTimeNullable < DateTime.Today)"
                                   HelperText="@(_hasErrorStep2 && StartTimeNullable == null ? "Start time is required." : "Select when the auction begins.")" />

                    <MudDatePicker Label="End Time"
                                   Date="@EndTimeNullable"
                                   DateChanged="@(d => EndTimeNullable = d)"
                                   Variant="Variant.Outlined"
                                   Error="@(_hasErrorStep2 && (EndTimeNullable == null || EndTimeNullable < StartTimeNullable || EndTimeNullable < DateTime.Today))"
                                   HelperText="@(_hasErrorStep2 && (EndTimeNullable == null || EndTimeNullable < StartTimeNullable)
                                                                                                  ? "End time must be after start time."
                                                                                                  : "Select when the auction will end.")" />
                </MudStack>
            </MudStep>

            <!-- Step 3 -->
        <MudStep Title="Step 3: Optional Settings" SecondaryText="Live auction toggle" HasError="@_hasErrorStep3" CompletedChanged="OnSubmitAuction">
                <MudStack Spacing="3">
                    <MudSwitch @bind-Value="_auction.LiveFlag" Color="Color.Success" Label="Make Auction Live?" />
                </MudStack>
            </MudStep>
        </MudStepper>
</MudContainer>

@code {
    private Auction _auction = new();
    private int _activeIndex = 0;
    private bool _hasErrorStep1;
    private bool _hasErrorStep2;
    private bool _hasErrorStep3;

    private DateTime? StartTimeNullable
    {
        get => _auction.StartTime != default ? _auction.StartTime : null;
        set => _auction.StartTime = value ?? default;
    }

    private DateTime? EndTimeNullable
    {
        get => _auction.EndTime != default ? _auction.EndTime : null;
        set => _auction.EndTime = value ?? default;
    }

    private async Task OnPreviewInteraction(StepperInteractionEventArgs arg)
    {
        try
        {
            if (arg.Action == StepAction.Complete)
                ValidateStep(arg.StepIndex, arg);
            else if (arg.Action == StepAction.Complete)
                ValidateNavigation(arg);

            await Task.Yield(); // prevents blocking UI
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Stepper error: {ex.Message}");
        }
    }

    private void ValidateStep(int stepIndex, StepperInteractionEventArgs arg)
    {
        switch (stepIndex)
        {
            case 0:
                _hasErrorStep1 = string.IsNullOrWhiteSpace(_auction.Name);
                if (_hasErrorStep1) arg.Cancel = true;
                break;

            case 1:
                _hasErrorStep2 = _auction.StartTime == default
                              || _auction.EndTime == default
                              || _auction.StartTime < DateTime.Today
                              || _auction.EndTime < DateTime.Today
                              || _auction.EndTime < _auction.StartTime;
                if (_hasErrorStep2) arg.Cancel = true;
                break;
        }
    }

    private void ValidateNavigation(StepperInteractionEventArgs arg)
    {
        if (arg.StepIndex == 1 && string.IsNullOrWhiteSpace(_auction.Name))
        {
            _hasErrorStep1 = true;
            arg.Cancel = true;
        }
        else if (arg.StepIndex == 2 && (
                    string.IsNullOrWhiteSpace(_auction.Name) ||
                    _auction.StartTime == default ||
                    _auction.EndTime == default ||
                    _auction.EndTime < _auction.StartTime))
        {
            _hasErrorStep2 = true;
            arg.Cancel = true;
        }
    }

    private async Task OnSubmitAuction()
    {
        _hasErrorStep1 = string.IsNullOrWhiteSpace(_auction.Name);
        _hasErrorStep2 = _auction.StartTime == default || _auction.EndTime == default || _auction.EndTime < _auction.StartTime;

        if (_hasErrorStep1)
        {
            Snackbar.Add("Please complete Step 1 before submitting.", Severity.Warning);
            _activeIndex = 0;
            return;
        }

        if (_hasErrorStep2)
        {
            Snackbar.Add("Please complete Step 2 before submitting.", Severity.Warning);
            _activeIndex = 1;
            return;
        }

        try
        {
            var savedAuction = await AuctionService.CreateAuctionAsync(_auction);

            NavigationManager.NavigateTo($"/{savedAuction.Id}");

            Snackbar.Add($"Auction '{savedAuction.Name}' created successfully!", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Failed to create auction: {ex.Message}", Severity.Error);
        }
    }
}
