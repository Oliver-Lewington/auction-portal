@using MudBlazor

<MudTextField Label="Title"
              Value="@Title"
              ValueChanged="EventCallback.Factory.Create<string>(this, OnTitleChanged)"
              ValueExpression="@(() => Title)"
              Variant="Variant.Outlined"
              FullWidth="true" />

<MudTextField Label="Description"
              Value="@Description"
              ValueChanged="EventCallback.Factory.Create<string>(this, OnDescriptionChanged)"
              ValueExpression="@(() => Description)"
              Lines="4"
              Variant="Variant.Outlined"
              FullWidth="true" />

<MudText Typo="Typo.subtitle2">Tags</MudText>
<MudChipSet T="string" 
            SelectedValues="Categories"
            SelectedValuesChanged="CategoriesChanged"
            SelectionMode="SelectionMode.MultiSelection"
            CheckMark="false"
            Variant="Variant.Text"
            Color="Color.Info">
    <MudChip Value="@("Luxury")" />
    <MudChip Value="@("Adventure")" />
    <MudChip Value="@("Wellness")" />
    <MudChip Value="@("Technology")" />
    <MudChip Value="@("Experience")" />
    <MudChip Value="@("Art & Design")" />
    <MudChip Value="@("Travel")" />
    <MudChip Value="@("Sports")" />
    <MudChip Value="@("Food & Drink")" />
    <MudChip Value="@("Premium Services")" />
</MudChipSet>

@code {
    [Parameter] public string Title { get; set; } = string.Empty;
    [Parameter] public EventCallback<string> TitleChanged { get; set; }

    [Parameter] public string Description { get; set; } = string.Empty;
    [Parameter] public EventCallback<string> DescriptionChanged { get; set; }

    [Parameter] public IReadOnlyCollection<string>? Categories { get; set; }
    [Parameter] public EventCallback<IReadOnlyCollection<string>> CategoriesChanged { get; set; }

    private async Task OnTitleChanged(string value)
    {
        Title = value;
        await TitleChanged.InvokeAsync(value);
    }

    private async Task OnDescriptionChanged(string value)
    {
        Description = value;
        await DescriptionChanged.InvokeAsync(value);
    }

    private async Task OnCategoriesChanged(string value)
    {
        Description = value;
        await DescriptionChanged.InvokeAsync(value);
    }
}
