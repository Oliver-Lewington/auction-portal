@using MudBlazor

<link rel="stylesheet" type="text/css" href="css/carousel.css">

<MudContainer Class="pa-1">
    @if (itemsList.Count == 0)
    {
        <div class="main-image-frame mb-3">
            <MudText Typo="Typo.h6">No images uploaded</MudText>
        </div>
    }
    else
    {
        <!-- Main image display -->
        <div class="main-image-frame mb-3" style="overflow:hidden;">
            <MudImage Src="@SelectedImage?.Url"
                      Alt="@SelectedImage?.Alt"
                      Class="main-image"
                      ObjectFit="ObjectFit.Contain"
                      Elevation="25"
                      Style="@($"transform: scale({ZoomLevel}); transition: transform 0.25s ease;")" />
        </div>

        <!-- Thumbnail strip -->
        <div class="d-flex justify-center align-center">
            <div class="thumbnail-strip mx-2">
                @foreach (var tuple in itemsList.Select((itm, idx) => (itm, idx)))
                {
                    var item = tuple.itm;
                    var idx = tuple.idx;
                    <MudImage Src="@item.Url"
                              Width="80"
                              Height="80"
                              ObjectFit="ObjectFit.Cover"
                              Class="@(idx == SelectedIndex ? "thumbnail selected" : "thumbnail")"
                              Elevation="@(idx == SelectedIndex ? 8 : 2)"
                              @onclick="@(() => OnThumbnailClick(idx))"
                              draggable="false" />
                }
            </div>
        </div>
    }
</MudContainer>

@code {
    [Parameter] public IEnumerable<ICarouselImage> Items { get; set; } = Enumerable.Empty<ICarouselImage>();

    // Two-way binding support for external selection
    [Parameter] public int SelectedIndex { get; set; } = 0;
    [Parameter] public EventCallback<int> SelectedIndexChanged { get; set; }

    [Parameter] public EventCallback<int> OnImageSelected { get; set; }

    [Parameter] public double ZoomLevel { get; set; } = 1.0;

    private List<ICarouselImage> itemsList = new();
    private ICarouselImage? SelectedImage =>
        (SelectedIndex >= 0 && SelectedIndex < itemsList.Count) ? itemsList[SelectedIndex] : null;

    protected override void OnParametersSet()
    {
        itemsList = Items?.ToList() ?? new List<ICarouselImage>();

        // Clamp SelectedIndex if it’s outside range
        if (SelectedIndex < 0 || SelectedIndex >= itemsList.Count)
            SelectedIndex = itemsList.Count > 0 ? 0 : -1;
    }

    private async Task OnThumbnailClick(int index)
    {
        if (index < 0 || index >= itemsList.Count) return;

        SelectedIndex = index;
        StateHasChanged();

        if (SelectedIndexChanged.HasDelegate)
            await SelectedIndexChanged.InvokeAsync(index);

        if (OnImageSelected.HasDelegate)
            await OnImageSelected.InvokeAsync(index);
    }
}
